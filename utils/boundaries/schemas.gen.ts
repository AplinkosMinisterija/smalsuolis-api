// This file is auto-generated by @hey-api/openapi-ts

export const $Address = {
  properties: {
    code: {
      type: 'integer',
      title: 'Code',
      description: 'Unique code of the address',
    },
    feature_id: {
      type: 'integer',
      title: 'Feature Id',
      description: 'Feature ID of the address',
    },
    plot_or_building_number: {
      type: 'string',
      title: 'Plot Or Building Number',
      description: 'Plot or building number of the address',
    },
    building_block_number: {
      anyOf: [
        {
          type: 'string',
          minLength: 1,
        },
        {
          type: 'null',
        },
      ],
      title: 'Building Block Number',
      description: 'Plot or building number of the address',
    },
    postal_code: {
      type: 'string',
      title: 'Postal Code',
      description: 'Postal code of the address',
    },
    street: {
      anyOf: [
        {
          $ref: '#/components/schemas/FlatStreet',
        },
        {
          type: 'null',
        },
      ],
      description: 'Street information the address belongs to',
    },
    residential_area: {
      anyOf: [
        {
          $ref: '#/components/schemas/FlatResidentialArea',
        },
        {
          type: 'null',
        },
      ],
      description: 'Residential area information the address belongs to',
    },
    municipality: {
      allOf: [
        {
          $ref: '#/components/schemas/ShortMunicipality',
        },
      ],
      description: 'Municipality information the address belongs to',
    },
    geometry: {
      allOf: [
        {
          $ref: '#/components/schemas/Geometry',
        },
      ],
      description: 'Point geometry of the address',
    },
  },
  type: 'object',
  required: [
    'code',
    'feature_id',
    'plot_or_building_number',
    'building_block_number',
    'postal_code',
    'street',
    'residential_area',
    'municipality',
    'geometry',
  ],
  title: 'Address',
} as const;

export const $AddressesFilter = {
  properties: {
    codes: {
      anyOf: [
        {
          items: {
            type: 'integer',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Codes',
      description: 'Filter by codes',
      examples: [[]],
    },
    feature_ids: {
      anyOf: [
        {
          items: {
            type: 'integer',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Feature Ids',
      description: 'Filter by feature IDs',
      examples: [[]],
    },
    plot_or_building_number: {
      anyOf: [
        {
          $ref: '#/components/schemas/StringFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by plot or building number',
    },
    building_block_number: {
      anyOf: [
        {
          $ref: '#/components/schemas/StringFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by building block number',
    },
    postal_code: {
      anyOf: [
        {
          $ref: '#/components/schemas/StringFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by postal code',
    },
  },
  type: 'object',
  title: 'AddressesFilter',
} as const;

export const $AddressesSearchFilterRequest = {
  properties: {
    geometry: {
      anyOf: [
        {
          $ref: '#/components/schemas/GeometryFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by geometry',
    },
    counties: {
      anyOf: [
        {
          $ref: '#/components/schemas/CountiesFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by counties',
    },
    municipalities: {
      anyOf: [
        {
          $ref: '#/components/schemas/MunicipalitiesFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by municipalities',
    },
    residential_areas: {
      anyOf: [
        {
          $ref: '#/components/schemas/ResidentialAreasFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by residential areas',
    },
    streets: {
      anyOf: [
        {
          $ref: '#/components/schemas/StreetsFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by streets',
    },
    addresses: {
      anyOf: [
        {
          $ref: '#/components/schemas/AddressesFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by addresses',
    },
  },
  type: 'object',
  title: 'AddressesSearchFilterRequest',
} as const;

export const $AddressesSearchRequest = {
  properties: {
    filters: {
      items: {
        $ref: '#/components/schemas/AddressesSearchFilterRequest',
      },
      type: 'array',
      title: 'Filters',
      description: 'A list of filters to apply for searching addresses, combined using OR logic.',
      default: [],
    },
  },
  type: 'object',
  title: 'AddressesSearchRequest',
} as const;

export const $CountiesFilter = {
  properties: {
    codes: {
      anyOf: [
        {
          items: {
            type: 'integer',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Codes',
      description: 'Filter by codes',
      examples: [[]],
    },
    feature_ids: {
      anyOf: [
        {
          items: {
            type: 'integer',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Feature Ids',
      description: 'Filter by feature IDs',
      examples: [[]],
    },
    name: {
      anyOf: [
        {
          $ref: '#/components/schemas/StringFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by name',
    },
  },
  type: 'object',
  title: 'CountiesFilter',
} as const;

export const $CountiesSearchFilterRequest = {
  properties: {
    geometry: {
      anyOf: [
        {
          $ref: '#/components/schemas/GeometryFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by geometry',
    },
    counties: {
      anyOf: [
        {
          $ref: '#/components/schemas/CountiesFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by counties',
    },
  },
  type: 'object',
  title: 'CountiesSearchFilterRequest',
} as const;

export const $CountiesSearchRequest = {
  properties: {
    filters: {
      items: {
        $ref: '#/components/schemas/CountiesSearchFilterRequest',
      },
      type: 'array',
      title: 'Filters',
      description: 'A list of filters to apply for searching counties, combined using OR logic.',
      default: [],
    },
  },
  type: 'object',
  title: 'CountiesSearchRequest',
} as const;

export const $County = {
  properties: {
    code: {
      type: 'integer',
      title: 'Code',
      description: 'Unique code of the county',
    },
    feature_id: {
      type: 'integer',
      title: 'Feature Id',
      description: 'Feature ID of the county',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the county',
    },
    area_ha: {
      type: 'number',
      title: 'Area Ha',
      description: 'Area of the county in hectares',
    },
    created_at: {
      type: 'string',
      format: 'date',
      title: 'Created At',
      description: 'Date of creation of the county',
    },
  },
  type: 'object',
  required: ['code', 'feature_id', 'name', 'area_ha', 'created_at'],
  title: 'County',
} as const;

export const $CountyWithGeometry = {
  properties: {
    code: {
      type: 'integer',
      title: 'Code',
      description: 'Unique code of the county',
    },
    feature_id: {
      type: 'integer',
      title: 'Feature Id',
      description: 'Feature ID of the county',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the county',
    },
    area_ha: {
      type: 'number',
      title: 'Area Ha',
      description: 'Area of the county in hectares',
    },
    created_at: {
      type: 'string',
      format: 'date',
      title: 'Created At',
      description: 'Date of creation of the county',
    },
    geometry: {
      allOf: [
        {
          $ref: '#/components/schemas/Geometry',
        },
      ],
      description: 'Geometry information of the county',
    },
  },
  type: 'object',
  required: ['code', 'feature_id', 'name', 'area_ha', 'created_at', 'geometry'],
  title: 'CountyWithGeometry',
} as const;

export const $CursorPage_Address_ = {
  properties: {
    items: {
      items: {
        $ref: '#/components/schemas/Address',
      },
      type: 'array',
      title: 'Items',
    },
    total: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Total',
      description: 'Total items',
    },
    current_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Current Page',
      description: 'Cursor to refetch the current page',
    },
    current_page_backwards: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Current Page Backwards',
      description: 'Cursor to refetch the current page starting from the last item',
    },
    previous_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Previous Page',
      description: 'Cursor for the previous page',
    },
    next_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Next Page',
      description: 'Cursor for the next page',
    },
  },
  type: 'object',
  required: ['items'],
  title: 'CursorPage[Address]',
} as const;

export const $CursorPage_County_ = {
  properties: {
    items: {
      items: {
        $ref: '#/components/schemas/County',
      },
      type: 'array',
      title: 'Items',
    },
    total: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Total',
      description: 'Total items',
    },
    current_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Current Page',
      description: 'Cursor to refetch the current page',
    },
    current_page_backwards: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Current Page Backwards',
      description: 'Cursor to refetch the current page starting from the last item',
    },
    previous_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Previous Page',
      description: 'Cursor for the previous page',
    },
    next_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Next Page',
      description: 'Cursor for the next page',
    },
  },
  type: 'object',
  required: ['items'],
  title: 'CursorPage[County]',
} as const;

export const $CursorPage_Eldership_ = {
  properties: {
    items: {
      items: {
        $ref: '#/components/schemas/Eldership',
      },
      type: 'array',
      title: 'Items',
    },
    total: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Total',
      description: 'Total items',
    },
    current_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Current Page',
      description: 'Cursor to refetch the current page',
    },
    current_page_backwards: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Current Page Backwards',
      description: 'Cursor to refetch the current page starting from the last item',
    },
    previous_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Previous Page',
      description: 'Cursor for the previous page',
    },
    next_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Next Page',
      description: 'Cursor for the next page',
    },
  },
  type: 'object',
  required: ['items'],
  title: 'CursorPage[Eldership]',
} as const;

export const $CursorPage_Municipality_ = {
  properties: {
    items: {
      items: {
        $ref: '#/components/schemas/Municipality',
      },
      type: 'array',
      title: 'Items',
    },
    total: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Total',
      description: 'Total items',
    },
    current_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Current Page',
      description: 'Cursor to refetch the current page',
    },
    current_page_backwards: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Current Page Backwards',
      description: 'Cursor to refetch the current page starting from the last item',
    },
    previous_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Previous Page',
      description: 'Cursor for the previous page',
    },
    next_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Next Page',
      description: 'Cursor for the next page',
    },
  },
  type: 'object',
  required: ['items'],
  title: 'CursorPage[Municipality]',
} as const;

export const $CursorPage_ResidentialArea_ = {
  properties: {
    items: {
      items: {
        $ref: '#/components/schemas/ResidentialArea',
      },
      type: 'array',
      title: 'Items',
    },
    total: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Total',
      description: 'Total items',
    },
    current_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Current Page',
      description: 'Cursor to refetch the current page',
    },
    current_page_backwards: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Current Page Backwards',
      description: 'Cursor to refetch the current page starting from the last item',
    },
    previous_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Previous Page',
      description: 'Cursor for the previous page',
    },
    next_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Next Page',
      description: 'Cursor for the next page',
    },
  },
  type: 'object',
  required: ['items'],
  title: 'CursorPage[ResidentialArea]',
} as const;

export const $CursorPage_Rooms_ = {
  properties: {
    items: {
      items: {
        $ref: '#/components/schemas/Rooms',
      },
      type: 'array',
      title: 'Items',
    },
    total: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Total',
      description: 'Total items',
    },
    current_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Current Page',
      description: 'Cursor to refetch the current page',
    },
    current_page_backwards: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Current Page Backwards',
      description: 'Cursor to refetch the current page starting from the last item',
    },
    previous_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Previous Page',
      description: 'Cursor for the previous page',
    },
    next_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Next Page',
      description: 'Cursor for the next page',
    },
  },
  type: 'object',
  required: ['items'],
  title: 'CursorPage[Rooms]',
} as const;

export const $CursorPage_Street_ = {
  properties: {
    items: {
      items: {
        $ref: '#/components/schemas/Street',
      },
      type: 'array',
      title: 'Items',
    },
    total: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Total',
      description: 'Total items',
    },
    current_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Current Page',
      description: 'Cursor to refetch the current page',
    },
    current_page_backwards: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Current Page Backwards',
      description: 'Cursor to refetch the current page starting from the last item',
    },
    previous_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Previous Page',
      description: 'Cursor for the previous page',
    },
    next_page: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Next Page',
      description: 'Cursor for the next page',
    },
  },
  type: 'object',
  required: ['items'],
  title: 'CursorPage[Street]',
} as const;

export const $Eldership = {
  properties: {
    code: {
      type: 'integer',
      title: 'Code',
      description: 'Unique code of the eldership',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the eldership',
    },
    feature_id: {
      type: 'integer',
      title: 'Feature Id',
      description: 'Feature ID of the eldership',
    },
    area_ha: {
      type: 'number',
      title: 'Area Ha',
      description: 'Area of the eldership in hectares',
    },
    municipality: {
      allOf: [
        {
          $ref: '#/components/schemas/ShortMunicipality',
        },
      ],
      description: 'Municipality information the eldership belongs to',
    },
    created_at: {
      type: 'string',
      format: 'date',
      title: 'Created At',
      description: 'Date of creation of the eldership',
    },
  },
  type: 'object',
  required: ['code', 'name', 'feature_id', 'area_ha', 'municipality', 'created_at'],
  title: 'Eldership',
} as const;

export const $EldershipWithGeometry = {
  properties: {
    code: {
      type: 'integer',
      title: 'Code',
      description: 'Unique code of the eldership',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the eldership',
    },
    feature_id: {
      type: 'integer',
      title: 'Feature Id',
      description: 'Feature ID of the eldership',
    },
    area_ha: {
      type: 'number',
      title: 'Area Ha',
      description: 'Area of the eldership in hectares',
    },
    municipality: {
      allOf: [
        {
          $ref: '#/components/schemas/ShortMunicipality',
        },
      ],
      description: 'Municipality information the eldership belongs to',
    },
    created_at: {
      type: 'string',
      format: 'date',
      title: 'Created At',
      description: 'Date of creation of the eldership',
    },
    geometry: {
      allOf: [
        {
          $ref: '#/components/schemas/Geometry',
        },
      ],
      description: 'Geometry information of the eldership',
    },
  },
  type: 'object',
  required: ['code', 'name', 'feature_id', 'area_ha', 'municipality', 'created_at', 'geometry'],
  title: 'EldershipWithGeometry',
} as const;

export const $EldershipsFilter = {
  properties: {
    codes: {
      anyOf: [
        {
          items: {
            type: 'integer',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Codes',
      description: 'Filter by codes',
      examples: [[]],
    },
    feature_ids: {
      anyOf: [
        {
          items: {
            type: 'integer',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Feature Ids',
      description: 'Filter by feature IDs',
      examples: [[]],
    },
    name: {
      anyOf: [
        {
          $ref: '#/components/schemas/StringFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by name',
    },
  },
  type: 'object',
  title: 'EldershipsFilter',
} as const;

export const $EldershipsSearchFilterRequest = {
  properties: {
    geometry: {
      anyOf: [
        {
          $ref: '#/components/schemas/GeometryFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by geometry',
    },
    counties: {
      anyOf: [
        {
          $ref: '#/components/schemas/CountiesFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by counties',
    },
    municipalities: {
      anyOf: [
        {
          $ref: '#/components/schemas/MunicipalitiesFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by municipalities',
    },
    elderships: {
      anyOf: [
        {
          $ref: '#/components/schemas/EldershipsFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by elderships',
    },
  },
  type: 'object',
  title: 'EldershipsSearchFilterRequest',
} as const;

export const $EldershipsSearchRequest = {
  properties: {
    filters: {
      items: {
        $ref: '#/components/schemas/EldershipsSearchFilterRequest',
      },
      type: 'array',
      title: 'Filters',
      description: 'A list of filters to apply for searching elderships, combined using OR logic.',
      default: [],
    },
  },
  type: 'object',
  title: 'EldershipsSearchRequest',
} as const;

export const $FlatResidentialArea = {
  properties: {
    code: {
      type: 'integer',
      title: 'Code',
      description: 'Unique code of the residential area',
    },
    feature_id: {
      type: 'integer',
      title: 'Feature Id',
      description: 'Feature ID of the residential area',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the residential area',
    },
  },
  type: 'object',
  required: ['code', 'feature_id', 'name'],
  title: 'FlatResidentialArea',
} as const;

export const $FlatStreet = {
  properties: {
    code: {
      type: 'integer',
      title: 'Code',
      description: 'Unique code of the street',
    },
    feature_id: {
      type: 'integer',
      title: 'Feature Id',
      description: 'Feature ID of the street',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the street',
    },
    full_name: {
      type: 'string',
      title: 'Full Name',
      description: 'The full name of the street, including its type',
    },
  },
  type: 'object',
  required: ['code', 'feature_id', 'name', 'full_name'],
  title: 'FlatStreet',
} as const;

export const $Geometry = {
  properties: {
    srid: {
      type: 'integer',
      title: 'Srid',
      description: 'Spatial Reference Identifier (SRID) for the geometry',
    },
    data: {
      type: 'string',
      title: 'Data',
      description: 'Geometry data in WKB (Well-Known Binary) format, represented as a hex string',
    },
  },
  type: 'object',
  required: ['srid', 'data'],
  title: 'Geometry',
} as const;

export const $GeometryFilter = {
  properties: {
    method: {
      allOf: [
        {
          $ref: '#/components/schemas/GeometryFilterMethod',
        },
      ],
      description: `Defines method used for filtering geometries:
- **\`intersects\`**: filter geometries that intersects any portion of space with the specified geometry.
- **\`contains\`**: filter geometries that are completely within the specified geometry.`,
      default: 'intersects',
    },
    ewkb: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Ewkb',
      description:
        'Extended Well-Known Binary (EWKB) represented as a hex string for geometry filtering',
      examples: [
        '0103000020E6100000010000000500000045F6419605473940B1DD3D40F7574B4045F641960547394061E124CD1F574B40719010E50B4A394061E124CD1F574B40719010E50B4A3940B1DD3D40F7574B4045F6419605473940B1DD3D40F7574B40',
      ],
    },
    ewkt: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Ewkt',
      description: 'Extended Well-Known Text (EWKT) for geometry filtering',
      examples: [
        'SRID=4326;POLYGON((25.277429 54.687233, 25.277429 54.680658, 25.289244 54.680658, 25.289244 54.687233, 25.277429 54.687233))',
      ],
    },
    geojson: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Geojson',
      description: 'GeoJson for geometry filtering',
      examples: [
        '{"crs":{"type":"name","properties":{"name":"EPSG:4326"}},"type":"Polygon","coordinates":[[[25.277429,54.687233],[25.277429,54.680658],[25.289244,54.680658],[25.289244,54.687233],[25.277429,54.687233]]]}',
      ],
    },
  },
  type: 'object',
  title: 'GeometryFilter',
} as const;

export const $GeometryFilterMethod = {
  type: 'string',
  enum: ['intersects', 'contains'],
  title: 'GeometryFilterMethod',
} as const;

export const $GeometryOutputFormat = {
  type: 'string',
  enum: ['ewkt', 'ewkb'],
  title: 'GeometryOutputFormat',
} as const;

export const $HTTPExceptionResponse = {
  properties: {
    detail: {
      type: 'string',
      title: 'Detail',
      description: 'Detailed error message',
    },
  },
  type: 'object',
  required: ['detail'],
  title: 'HTTPExceptionResponse',
  example: {
    detail: 'HTTPException raised.',
  },
} as const;

export const $HTTPValidationError = {
  properties: {
    detail: {
      items: {
        $ref: '#/components/schemas/ValidationError',
      },
      type: 'array',
      title: 'Detail',
    },
  },
  type: 'object',
  title: 'HTTPValidationError',
} as const;

export const $HealthCheck = {
  properties: {
    healthy: {
      type: 'boolean',
      title: 'Healthy',
      description: 'Health status of the service',
    },
  },
  type: 'object',
  required: ['healthy'],
  title: 'HealthCheck',
  description: 'Response model to validate and return when performing a health check.',
} as const;

export const $MunicipalitiesFilter = {
  properties: {
    codes: {
      anyOf: [
        {
          items: {
            type: 'integer',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Codes',
      description: 'Filter by codes',
      examples: [[]],
    },
    feature_ids: {
      anyOf: [
        {
          items: {
            type: 'integer',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Feature Ids',
      description: 'Filter by feature IDs',
      examples: [[]],
    },
    name: {
      anyOf: [
        {
          $ref: '#/components/schemas/StringFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by name',
    },
  },
  type: 'object',
  title: 'MunicipalitiesFilter',
} as const;

export const $MunicipalitiesSearchFilterRequest = {
  properties: {
    geometry: {
      anyOf: [
        {
          $ref: '#/components/schemas/GeometryFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by geometry',
    },
    counties: {
      anyOf: [
        {
          $ref: '#/components/schemas/CountiesFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by counties',
    },
    municipalities: {
      anyOf: [
        {
          $ref: '#/components/schemas/MunicipalitiesFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by municipalities',
    },
  },
  type: 'object',
  title: 'MunicipalitiesSearchFilterRequest',
} as const;

export const $MunicipalitiesSearchRequest = {
  properties: {
    filters: {
      items: {
        $ref: '#/components/schemas/MunicipalitiesSearchFilterRequest',
      },
      type: 'array',
      title: 'Filters',
      description:
        'A list of filters to apply for searching municipalities, combined using OR logic.',
      default: [],
    },
  },
  type: 'object',
  title: 'MunicipalitiesSearchRequest',
} as const;

export const $Municipality = {
  properties: {
    code: {
      type: 'integer',
      title: 'Code',
      description: 'Unique code of the municipality',
    },
    feature_id: {
      type: 'integer',
      title: 'Feature Id',
      description: 'Feature ID of the municipality',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the municipality',
    },
    county: {
      allOf: [
        {
          $ref: '#/components/schemas/ShortCounty',
        },
      ],
      description: 'County information the municipality belongs to',
    },
    area_ha: {
      type: 'number',
      title: 'Area Ha',
      description: 'Area of the municipality in hectares',
    },
    created_at: {
      type: 'string',
      format: 'date',
      title: 'Created At',
      description: 'Date of creation of the municipality',
    },
  },
  type: 'object',
  required: ['code', 'feature_id', 'name', 'county', 'area_ha', 'created_at'],
  title: 'Municipality',
} as const;

export const $MunicipalityWithGeometry = {
  properties: {
    code: {
      type: 'integer',
      title: 'Code',
      description: 'Unique code of the municipality',
    },
    feature_id: {
      type: 'integer',
      title: 'Feature Id',
      description: 'Feature ID of the municipality',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the municipality',
    },
    county: {
      allOf: [
        {
          $ref: '#/components/schemas/ShortCounty',
        },
      ],
      description: 'County information the municipality belongs to',
    },
    area_ha: {
      type: 'number',
      title: 'Area Ha',
      description: 'Area of the municipality in hectares',
    },
    created_at: {
      type: 'string',
      format: 'date',
      title: 'Created At',
      description: 'Date of creation of the municipality',
    },
    geometry: {
      allOf: [
        {
          $ref: '#/components/schemas/Geometry',
        },
      ],
      description: 'Geometry information of the municipality',
    },
  },
  type: 'object',
  required: ['code', 'feature_id', 'name', 'county', 'area_ha', 'created_at', 'geometry'],
  title: 'MunicipalityWithGeometry',
} as const;

export const $ResidentialArea = {
  properties: {
    code: {
      type: 'integer',
      title: 'Code',
      description: 'Unique code of the residential area',
    },
    feature_id: {
      type: 'integer',
      title: 'Feature Id',
      description: 'Feature ID of the residential area',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the residential area',
    },
    municipality: {
      allOf: [
        {
          $ref: '#/components/schemas/ShortMunicipality',
        },
      ],
      description: 'Municipality information the residential area belongs to',
    },
    area_ha: {
      type: 'number',
      title: 'Area Ha',
      description: 'Area of the residential area in hectares',
    },
    created_at: {
      type: 'string',
      format: 'date',
      title: 'Created At',
      description: 'Date of creation of the residential area',
    },
  },
  type: 'object',
  required: ['code', 'feature_id', 'name', 'municipality', 'area_ha', 'created_at'],
  title: 'ResidentialArea',
} as const;

export const $ResidentialAreaWithGeometry = {
  properties: {
    code: {
      type: 'integer',
      title: 'Code',
      description: 'Unique code of the residential area',
    },
    feature_id: {
      type: 'integer',
      title: 'Feature Id',
      description: 'Feature ID of the residential area',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the residential area',
    },
    municipality: {
      allOf: [
        {
          $ref: '#/components/schemas/ShortMunicipality',
        },
      ],
      description: 'Municipality information the residential area belongs to',
    },
    area_ha: {
      type: 'number',
      title: 'Area Ha',
      description: 'Area of the residential area in hectares',
    },
    created_at: {
      type: 'string',
      format: 'date',
      title: 'Created At',
      description: 'Date of creation of the residential area',
    },
    geometry: {
      allOf: [
        {
          $ref: '#/components/schemas/Geometry',
        },
      ],
      description: 'Geometry information of the residential area',
    },
  },
  type: 'object',
  required: ['code', 'feature_id', 'name', 'municipality', 'area_ha', 'created_at', 'geometry'],
  title: 'ResidentialAreaWithGeometry',
} as const;

export const $ResidentialAreasFilter = {
  properties: {
    codes: {
      anyOf: [
        {
          items: {
            type: 'integer',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Codes',
      description: 'Filter by codes',
      examples: [[]],
    },
    feature_ids: {
      anyOf: [
        {
          items: {
            type: 'integer',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Feature Ids',
      description: 'Filter by feature IDs',
      examples: [[]],
    },
    name: {
      anyOf: [
        {
          $ref: '#/components/schemas/StringFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by name',
    },
  },
  type: 'object',
  title: 'ResidentialAreasFilter',
} as const;

export const $ResidentialAreasSearchFilterRequest = {
  properties: {
    geometry: {
      anyOf: [
        {
          $ref: '#/components/schemas/GeometryFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by geometry',
    },
    counties: {
      anyOf: [
        {
          $ref: '#/components/schemas/CountiesFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by counties',
    },
    municipalities: {
      anyOf: [
        {
          $ref: '#/components/schemas/MunicipalitiesFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by municipalities',
    },
    residential_areas: {
      anyOf: [
        {
          $ref: '#/components/schemas/ResidentialAreasFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by residential areas',
    },
  },
  type: 'object',
  title: 'ResidentialAreasSearchFilterRequest',
} as const;

export const $ResidentialAreasSearchRequest = {
  properties: {
    filters: {
      items: {
        $ref: '#/components/schemas/ResidentialAreasSearchFilterRequest',
      },
      type: 'array',
      title: 'Filters',
      description:
        'A list of filters to apply for searching residential areas, combined using OR logic.',
      default: [],
    },
  },
  type: 'object',
  title: 'ResidentialAreasSearchRequest',
} as const;

export const $Rooms = {
  properties: {
    code: {
      type: 'integer',
      title: 'Code',
      description: 'Unique code of the room',
    },
    room_number: {
      type: 'string',
      title: 'Room Number',
      description: 'Room number in the building or building section',
    },
    created_at: {
      type: 'string',
      format: 'date',
      title: 'Created At',
      description: 'Date of creation of the room address',
    },
    geometry: {
      allOf: [
        {
          $ref: '#/components/schemas/Geometry',
        },
      ],
      description: 'Point geometry of the address',
    },
    address: {
      allOf: [
        {
          $ref: '#/components/schemas/ShortAddress',
        },
      ],
      description: 'Address of the room',
    },
  },
  type: 'object',
  required: ['code', 'room_number', 'created_at', 'geometry', 'address'],
  title: 'Rooms',
} as const;

export const $RoomsFilter = {
  properties: {
    codes: {
      anyOf: [
        {
          items: {
            type: 'integer',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Codes',
      description: 'Filter by codes',
      examples: [[]],
    },
    room_number: {
      anyOf: [
        {
          $ref: '#/components/schemas/StringFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by room number',
    },
  },
  type: 'object',
  title: 'RoomsFilter',
} as const;

export const $RoomsSearchFilterRequest = {
  properties: {
    geometry: {
      anyOf: [
        {
          $ref: '#/components/schemas/GeometryFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by geometry',
    },
    counties: {
      anyOf: [
        {
          $ref: '#/components/schemas/CountiesFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by counties',
    },
    municipalities: {
      anyOf: [
        {
          $ref: '#/components/schemas/MunicipalitiesFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by municipalities',
    },
    residential_areas: {
      anyOf: [
        {
          $ref: '#/components/schemas/ResidentialAreasFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by residential areas',
    },
    streets: {
      anyOf: [
        {
          $ref: '#/components/schemas/StreetsFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by streets',
    },
    rooms: {
      anyOf: [
        {
          $ref: '#/components/schemas/RoomsFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by rooms',
    },
  },
  type: 'object',
  title: 'RoomsSearchFilterRequest',
} as const;

export const $RoomsSearchRequest = {
  properties: {
    filters: {
      items: {
        $ref: '#/components/schemas/RoomsSearchFilterRequest',
      },
      type: 'array',
      title: 'Filters',
      description: 'A list of filters to apply for searching rooms, combined using OR logic.',
      default: [],
    },
  },
  type: 'object',
  title: 'RoomsSearchRequest',
} as const;

export const $SearchSortBy = {
  type: 'string',
  enum: ['code', 'name', 'feature_id', 'created_at'],
  title: 'SearchSortBy',
} as const;

export const $SearchSortOrder = {
  type: 'string',
  enum: ['asc', 'desc'],
  title: 'SearchSortOrder',
} as const;

export const $ShortAddress = {
  properties: {
    code: {
      type: 'integer',
      title: 'Code',
      description: 'Unique code of the address',
    },
    feature_id: {
      type: 'integer',
      title: 'Feature Id',
      description: 'Feature ID of the address',
    },
    plot_or_building_number: {
      type: 'string',
      title: 'Plot Or Building Number',
      description: 'Plot or building number of the address',
    },
    building_block_number: {
      anyOf: [
        {
          type: 'string',
          minLength: 1,
        },
        {
          type: 'null',
        },
      ],
      title: 'Building Block Number',
      description: 'Plot or building number of the address',
    },
    postal_code: {
      type: 'string',
      title: 'Postal Code',
      description: 'Postal code of the address',
    },
    street: {
      anyOf: [
        {
          $ref: '#/components/schemas/FlatStreet',
        },
        {
          type: 'null',
        },
      ],
      description: 'Street information the address belongs to',
    },
    residential_area: {
      anyOf: [
        {
          $ref: '#/components/schemas/FlatResidentialArea',
        },
        {
          type: 'null',
        },
      ],
      description: 'Residential area information the address belongs to',
    },
    municipality: {
      allOf: [
        {
          $ref: '#/components/schemas/ShortMunicipality',
        },
      ],
      description: 'Municipality information the address belongs to',
    },
  },
  type: 'object',
  required: [
    'code',
    'feature_id',
    'plot_or_building_number',
    'building_block_number',
    'postal_code',
    'street',
    'residential_area',
    'municipality',
  ],
  title: 'ShortAddress',
} as const;

export const $ShortCounty = {
  properties: {
    code: {
      type: 'integer',
      title: 'Code',
      description: 'Unique code of the county',
    },
    feature_id: {
      type: 'integer',
      title: 'Feature Id',
      description: 'Feature ID of the county',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the county',
    },
  },
  type: 'object',
  required: ['code', 'feature_id', 'name'],
  title: 'ShortCounty',
} as const;

export const $ShortMunicipality = {
  properties: {
    code: {
      type: 'integer',
      title: 'Code',
      description: 'Unique code of the municipality',
    },
    feature_id: {
      type: 'integer',
      title: 'Feature Id',
      description: 'Feature ID of the municipality',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the municipality',
    },
    county: {
      allOf: [
        {
          $ref: '#/components/schemas/ShortCounty',
        },
      ],
      description: 'County information the municipality belongs to',
    },
  },
  type: 'object',
  required: ['code', 'feature_id', 'name', 'county'],
  title: 'ShortMunicipality',
} as const;

export const $ShortResidentialArea = {
  properties: {
    code: {
      type: 'integer',
      title: 'Code',
      description: 'Unique code of the residential area',
    },
    feature_id: {
      type: 'integer',
      title: 'Feature Id',
      description: 'Feature ID of the residential area',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the residential area',
    },
    municipality: {
      allOf: [
        {
          $ref: '#/components/schemas/ShortMunicipality',
        },
      ],
      description: 'Municipality information the residential area belongs to',
    },
  },
  type: 'object',
  required: ['code', 'feature_id', 'name', 'municipality'],
  title: 'ShortResidentialArea',
} as const;

export const $Street = {
  properties: {
    code: {
      type: 'integer',
      title: 'Code',
      description: 'Unique code of the street',
    },
    feature_id: {
      type: 'integer',
      title: 'Feature Id',
      description: 'Feature ID of the street',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the street',
    },
    full_name: {
      type: 'string',
      title: 'Full Name',
      description: 'The full name of the street, including its type',
    },
    length_m: {
      type: 'number',
      title: 'Length M',
      description: 'The total length of the street in meters',
    },
    created_at: {
      type: 'string',
      format: 'date',
      title: 'Created At',
      description: 'Date of creation of the street',
    },
    residential_area: {
      allOf: [
        {
          $ref: '#/components/schemas/ShortResidentialArea',
        },
      ],
      description: 'Residential area information the street belongs to',
    },
  },
  type: 'object',
  required: [
    'code',
    'feature_id',
    'name',
    'full_name',
    'length_m',
    'created_at',
    'residential_area',
  ],
  title: 'Street',
} as const;

export const $StreetWithGeometry = {
  properties: {
    code: {
      type: 'integer',
      title: 'Code',
      description: 'Unique code of the street',
    },
    feature_id: {
      type: 'integer',
      title: 'Feature Id',
      description: 'Feature ID of the street',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the street',
    },
    full_name: {
      type: 'string',
      title: 'Full Name',
      description: 'The full name of the street, including its type',
    },
    length_m: {
      type: 'number',
      title: 'Length M',
      description: 'The total length of the street in meters',
    },
    created_at: {
      type: 'string',
      format: 'date',
      title: 'Created At',
      description: 'Date of creation of the street',
    },
    residential_area: {
      allOf: [
        {
          $ref: '#/components/schemas/ShortResidentialArea',
        },
      ],
      description: 'Residential area information the street belongs to',
    },
    geometry: {
      allOf: [
        {
          $ref: '#/components/schemas/Geometry',
        },
      ],
      description: 'Line geometry information of the street',
    },
  },
  type: 'object',
  required: [
    'code',
    'feature_id',
    'name',
    'full_name',
    'length_m',
    'created_at',
    'residential_area',
    'geometry',
  ],
  title: 'StreetWithGeometry',
} as const;

export const $StreetsFilter = {
  properties: {
    codes: {
      anyOf: [
        {
          items: {
            type: 'integer',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Codes',
      description: 'Filter by codes',
      examples: [[]],
    },
    feature_ids: {
      anyOf: [
        {
          items: {
            type: 'integer',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Feature Ids',
      description: 'Filter by feature IDs',
      examples: [[]],
    },
    name: {
      anyOf: [
        {
          $ref: '#/components/schemas/StringFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by name',
    },
    full_name: {
      anyOf: [
        {
          $ref: '#/components/schemas/StringFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by full name',
    },
  },
  type: 'object',
  title: 'StreetsFilter',
} as const;

export const $StreetsSearchFilterRequest = {
  properties: {
    geometry: {
      anyOf: [
        {
          $ref: '#/components/schemas/GeometryFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by geometry',
    },
    counties: {
      anyOf: [
        {
          $ref: '#/components/schemas/CountiesFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by counties',
    },
    municipalities: {
      anyOf: [
        {
          $ref: '#/components/schemas/MunicipalitiesFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by municipalities',
    },
    residential_areas: {
      anyOf: [
        {
          $ref: '#/components/schemas/ResidentialAreasFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by residential areas',
    },
    streets: {
      anyOf: [
        {
          $ref: '#/components/schemas/StreetsFilter',
        },
        {
          type: 'null',
        },
      ],
      description: 'Filter by streets',
    },
  },
  type: 'object',
  title: 'StreetsSearchFilterRequest',
} as const;

export const $StreetsSearchRequest = {
  properties: {
    filters: {
      items: {
        $ref: '#/components/schemas/StreetsSearchFilterRequest',
      },
      type: 'array',
      title: 'Filters',
      description: 'A list of filters to apply for searching streets, combined using OR logic.',
      default: [],
    },
  },
  type: 'object',
  title: 'StreetsSearchRequest',
} as const;

export const $StringFilter = {
  properties: {
    contains: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Contains',
      description: 'Filter by containing a string (case insensitive)',
      examples: [''],
    },
    exact: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Exact',
      description: 'Filter by exact string (case insensitive)',
      examples: [''],
    },
    starts: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Starts',
      description: 'Filter by starting with a string (case insensitive)',
      examples: [''],
    },
  },
  type: 'object',
  title: 'StringFilter',
} as const;

export const $ValidationError = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: 'string',
          },
          {
            type: 'integer',
          },
        ],
      },
      type: 'array',
      title: 'Location',
    },
    msg: {
      type: 'string',
      title: 'Message',
    },
    type: {
      type: 'string',
      title: 'Error Type',
    },
  },
  type: 'object',
  required: ['loc', 'msg', 'type'],
  title: 'ValidationError',
} as const;
